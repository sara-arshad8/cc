using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

class SymbolEntry
{
    public string VarName { get; set; }
    public string Type { get; set; }
    public string Value { get; set; }
    public int LineNumber { get; set; }
}

class Program
{
    static void Main()
    {
        List<SymbolEntry> symbolTable = new List<SymbolEntry>();
        int lineNumber = 1;

        Console.WriteLine("Enter your code lines one by one (type 'end' to finish):");

        while (true)
        {
            Console.Write($"Line {lineNumber}: ");
            string inputLine = Console.ReadLine();

            if (inputLine.Trim().ToLower() == "end")
                break;

            // Regex to match format like: int varName = value;
            Match match = Regex.Match(inputLine, @"^(int|float|string|var)\s+([a-zA-Z0-9_]+)\s*=\s*([^;]+);$");

            if (match.Success)
            {
                string type = match.Groups[1].Value;
                string varName = match.Groups[2].Value;
                string value = match.Groups[3].Value;

                // Only insert if varName contains a palindrome of length >= 3
                if (ContainsPalindrome(varName))
                {
                    symbolTable.Add(new SymbolEntry
                    {
                        Type = type,
                        VarName = varName,
                        Value = value,
                        LineNumber = lineNumber
                    });
                }
            }

            lineNumber++;
        }

        // Print Symbol Table
        Console.WriteLine("\nSymbol Table (Variables with Palindromes in Name):");
        Console.WriteLine("----------------------------------------------------------");
        Console.WriteLine($"{"Line",-6} | {"Type",-8} | {"Variable",-12} | {"Value"}");
        Console.WriteLine("----------------------------------------------------------");

        foreach (var entry in symbolTable)
        {
            Console.WriteLine($"{entry.LineNumber,-6} | {entry.Type,-8} | {entry.VarName,-12} | {entry.Value}");
        }

        Console.WriteLine("----------------------------------------------------------");
    }

    // Check for palindrome substrings of length >= 3
    static bool ContainsPalindrome(string str)
    {
        for (int i = 0; i < str.Length; i++)
        {
            for (int len = 3; len <= str.Length - i; len++)
            {
                string sub = str.Substring(i, len);
                if (IsPalindrome(sub))
                    return true;
            }
        }
        return false;
    }

    // Custom logic to check if a string is a palindrome
    static bool IsPalindrome(string s)
    {
        int start = 0;
        int end = s.Length - 1;
        while (start < end)
        {
            if (s[start] != s[end])
                return false;
            start++;
            end--;
        }
        return true;
    }
}
