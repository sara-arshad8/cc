using System;
using System.Collections.Generic;

class SymbolTable
{
    private Dictionary<int, string> table;

    public SymbolTable()
    {
        table = new Dictionary<int, string>();
    }

    private int HashFunction(string key)
    {
        int hash = 0;
        foreach (char c in key)
        {
            hash = (hash * 31 + c) % 100; // Simple hash function
        }
        return hash;
    }

    public void Insert(string identifier)
    {
        int hash = HashFunction(identifier);
        if (!table.ContainsKey(hash))
        {
            table[hash] = identifier;
            Console.WriteLine($"Inserted: {identifier} at {hash}");
        }
        else
        {
            Console.WriteLine($"Collision occurred for {identifier} at {hash}");
        }
    }

    public bool Lookup(string identifier)
    {
        int hash = HashFunction(identifier);
        return table.ContainsKey(hash) && table[hash] == identifier;
    }

    public void Display()
    {
        Console.WriteLine("Symbol Table:");
        foreach (var entry in table)
        {
            Console.WriteLine($"{entry.Key}: {entry.Value}");
        }
    }
}

class Program
{
    static void Main()
    {
        SymbolTable symTable = new SymbolTable();
        symTable.Insert("x");
        symTable.Insert("y");
        symTable.Insert("z");
        
        Console.WriteLine("Lookup x: " + symTable.Lookup("x"));
        Console.WriteLine("Lookup a: " + symTable.Lookup("a"));
        
        symTable.Display();
    }
}
